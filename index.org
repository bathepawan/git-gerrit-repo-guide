#+Title: A Quick Guide To Git, Gerrit, Repo
#+Author: - Shantanu Goel
#+DATE:

#+OPTIONS: toc:nil num:nil timestamp:nil
#+OPTIONS: reveal_center:f 
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t 
#+REVEAL_TRANS: fade
#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_EXTRA_CSS: css/custom.css

* The "Repository"
Contains all data and metadata for the git version control system

#+ATTR_REVEAL: :frag roll-in

- Create new repository

#+BEGIN_SRC shell
git init
#+END_SRC
- "Get" an existing repository
  
#+BEGIN_SRC shell
  git clone [path-to-repository]
#+END_SRC

* The Three States

[[./images/git-working-directory-index-head.png]]

#+REVEAL_HTML: <small>Image &copy; https://git-scm.com/book/</small>

=*= Staging area is also known as the "index"

* Configuration

- Lots of Configuration options but don't get overwhelmed
- Just need to setup username and email to be able to commit

#+BEGIN_SRC bash
git config --global user.name "Shantanu Goel"
git config --global user.email "shantanu@shantanugoel.com"
#+END_SRC

- Look into setting up ssh keys for working easily with remote repositories

* Basic workflow

- Make changes

- Check if any changes have been made
  
#+BEGIN_SRC bash
git status -s
#+END_SRC
- Diff the changes to confirm that they are correct

#+BEGIN_SRC bash
git diff
#+END_SRC

#+BEGIN_SRC bash
git diff [filename]
#+END_SRC

- Stage the changes (add them to the index)

#+BEGIN_SRC bash
git add [filename]
#+END_SRC

#+BEGIN_SRC bash
# Stage all files under current path
git add .
#+END_SRC

#+BEGIN_SRC bash
# See diff of staged files
git diff --cache
#+END_SRC


* Basic workflow continued..
  
- Commit the changes (Update the HEAD)

#+BEGIN_SRC bash
git commit
#+END_SRC

#+BEGIN_SRC bash
# Add all tracked files without needing a git add step and
# specify a short commit message with the command itself
git commit -am
#+END_SRC

- Check log

#+BEGIN_SRC bash
git log
#+END_SRC

#+BEGIN_SRC bash
git log --oneline --graph
#+END_SRC

- Push changes to remote repository

#+BEGIN_SRC bash
git push [repository] [branch]
git push origin master 
#+END_SRC

- Explore various other switches/options of these commands

* Branching and Merging

[[./images/branches.png]]
#+REVEAL_HTML: <small>Image &copy; https://atlassian.com/</small>

* Branching and Merging

- Always work on branches while making any non-trivial changes, so that you can develop in isolation.
- Merge back to master when done
- Any branch could be "master" branch. Names don't matter
- List all branches  
#+BEGIN_SRC bash 
git branch
#+END_SRC

- Switch to an existing branch
#+BEGIN_SRC bash 
git checkout [branch-name]
#+END_SRC

- Create new branch and switch to it
  
#+BEGIN_SRC bash 
git checkout -b [branch-name]
#+END_SRC

* Branching and Merging
- Merging is the act of combining the commits made in different branches into a unified history
- Receiving branch: The branch that will have another branch's changes merged into itself
- You should be on the receiving branch while executing the below command
#+BEGIN_SRC bash 
git merge [branch-to-merge]
#+END_SRC

- Deleting a branch (Either changes are merged or not needed anymore otherwise)

#+BEGIN_SRC bash 
git branch -d [branch-name]
#+END_SRC
  
* Rebasing
[[./images/rebase.svg]]
#+REVEAL_HTML: <small>Image &copy; https://atlassian.com/</small>
* Rebasing
- Similar to merge, but rewrites the history
- Bring in all changes that happened in source branch while you were making changes in your branch.
- Apply your changes on top of this new base
- Often required by projects before accepting your patches if they can't be cleanly merged
#+BEGIN_SRC bash 
git rebase
#+END_SRC
- Interactive rebase provides you opportunity to pick and choose the commits you need

#+BEGIN_SRC bash 
git rebase -i
#+END_SRC

- Don't rebase public/permanent branches
  
* Conflicts
- You may come across conflicts during merging or rebasing

#+BEGIN_SRC bash 
  Unimpacted content
  <<<<<<<< source-branch
  Conflicting code from source branch
  ========
  Conflicting code from feature branch
#+END_SRC

- Manually fix the conflicts by editing files
- Use normal process to add/commit the files
- For conflicts seen during a rebase, you also have to do either one of:
#+BEGIN_SRC bash 
# Conflicts fixed, continue rebasing
git rebase --continue
# Abort rebasing
git rebase --abort
# Skip this commit
git rebase --skip
#+END_SRC

* Cherry-Picking
- You may want to pick a specific fix from another branch
- Or maybe you are jointly working on a feature with someone else maintaining their own feature branch
- Cherry-picking will take the specified commit and apply it to the head of your branch

#+BEGIN_SRC bash
git cherry-pick [commit-hash-to-pick]
#+END_SRC


* When things go wrong: Undo
- When you want to remove your changes temporarily to try something else

#+BEGIN_SRC bash
# Save current staged and unstaged changes into a hidden location
# and remove them from the working directory
git stash
#+END_SRC

#+BEGIN_SRC bash
# Bring back stashed changes
git stash pop
#+END_SRC

- Can also be useful while merging/rebasing without committing
- Can have multiple stashes. Explore through references.

* When things go wrong: Undo
- Temporarily go back to a previous commit in history
#+BEGIN_SRC bash
git checkout [commit-hash]
#+END_SRC

- This will put you in a "Detached head state"
- You can make changes here but can't commit as you are no longer on a branch

* When things go wrong: Undo
- Discard currently unstaged changes
#+BEGIN_SRC bash
git checkout -- [file-name-or-path-or.]
#+END_SRC

- Remove the changes done in a previous commit

#+BEGIN_SRC bash
git revert [commit-hash]
#+END_SRC

- Creates a new commit which removes the changes introduced by the commit being reverted

  
* Repo
- Tool developed by Google for large projects working with multiple git repositories
- Git already has submodules and subtrees but the project may want the repositories to be independently worked on
- Pros and cons are debatable, largely subjective
- repo has integration with gerrit, a tool for code reviews and management

* Gerrit
- Provides web based code review and repository management for git
- Upload changes to gerrit, following any given guidelines for the project (including code as well as commit messages)
- Add reviewers and wait for their comments
- Auto checkers may be integrated by project maintainers for verifying changes
- -1/-2 from a checker or reviewer needs you to make changes and upload new patches
- +1 is good, but generally you need a +2 before the changes can be submitted/merged

* References
- Beginner: https://www.atlassian.com/git/tutorials
- Intermediate: https://wildlyinaccurate.com/a-hackers-guide-to-git/
- Intermediate: https://git-scm.com/book/en/v2
- All: Git man pages
- Repo: https://source.android.com/setup/develop/repo
